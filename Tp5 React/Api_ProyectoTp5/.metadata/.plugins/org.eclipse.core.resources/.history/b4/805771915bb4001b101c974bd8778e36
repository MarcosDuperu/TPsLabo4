package com.proyecto.react.controller;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import javax.validation.Valid;

import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.proyecto.react.entity.Instrumento;
import com.proyecto.react.service.InstrumentoServiceImpl;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(path = "api/instrumento/")
public class InstrumentoController {

	@Autowired
	protected InstrumentoServiceImpl service;

	@GetMapping("/listar-instrumentos")
	public ResponseEntity<?> listarInstrumentos() {
		return ResponseEntity.ok().body(service.findAll());
	}

	@GetMapping("/mostrar-instrumento/{id}")
	public ResponseEntity<?> mostrarInstrumentos(@PathVariable long id) {
		Optional<Instrumento> o = service.findById(id);
		if (o.isEmpty()) {
			return ResponseEntity.notFound().build();
		}
		return ResponseEntity.ok(o.get());
	}

	@PostMapping("/crear-instrumento")
	public ResponseEntity<?> crearInstrumento(@RequestBody Instrumento instrumento) {
		Instrumento instrumentoDB = service.save(instrumento);
		return ResponseEntity.status(HttpStatus.CREATED).body(instrumentoDB);
	}

	@DeleteMapping("{id}")
	public ResponseEntity<?> eliminarInstrumento(@PathVariable Long id) {
		service.deleteById(id);
		return ResponseEntity.noContent().build();
	}

	@PutMapping("/editar-instrumento/{id}")
	public ResponseEntity<?> editarInstrumento(@RequestBody Instrumento instrumento, @PathVariable Long id) {
		Optional<Instrumento> o = service.findById(id);
		if (o.isEmpty()) {
			return ResponseEntity.notFound().build();
		}
		Instrumento instrumentoDB = o.get();
		instrumentoDB.setInstrumento(instrumento.getInstrumento());
		instrumentoDB.setCantidadVendida(instrumento.getCantidadVendida());
		instrumentoDB.setCostoEnvio(instrumento.getCostoEnvio());
		instrumentoDB.setDescripcion(instrumento.getDescripcion());
		instrumentoDB.setModelo(instrumento.getModelo());
		instrumentoDB.setPrecio(instrumento.getPrecio());
		instrumentoDB.setImagen(instrumento.getImagen());

		return ResponseEntity.status(HttpStatus.CREATED).body(service.save(instrumentoDB));
	}

	@GetMapping("/uploads/img/{id}")
	public ResponseEntity<?> verImagen(@PathVariable Long id) {

		Optional<Instrumento> imag = service.findById(id);

		if (imag.isEmpty() || imag.get().getImagen() == null) {
			return ResponseEntity.notFound().build();
		}

		Resource imagen = new ByteArrayResource(imag.get().getImagen()); // pasamos bytes como argumentos

		return ResponseEntity.ok().contentType(MediaType.IMAGE_JPEG).body(imagen);
	}

	// PARA CREAR Y EDITAR EL INSTRUMENTO CON IMAGENES//

	@PostMapping("/crear-con-imagen")
	public ResponseEntity<?> crearInsConImag(@Valid Instrumento instrumento, BindingResult result,
			@RequestParam MultipartFile archivo) throws IOException {
		if (!archivo.isEmpty()) {
			instrumento.setImagen(archivo.getBytes());
		}
		return this.crear(instrumento, result);
	}

	@PostMapping
	public ResponseEntity<?> crear(@Valid @RequestBody Instrumento instrumento, BindingResult result) {

		if (result.hasErrors()) {
			return this.validar(result);
		}
		Instrumento instrumentoDB = service.save(instrumento);
		return ResponseEntity.status(HttpStatus.CREATED).body(instrumentoDB);
	}

	@PutMapping("/editar-con-foto/{id}")
	public ResponseEntity<?> editarConFoto(@Valid Instrumento instrumento, BindingResult result, @PathVariable Long id,
			@RequestParam MultipartFile archivo) throws IOException {

		if (result.hasErrors()) {
			return this.validar(result);
		}

		Optional<Instrumento> i = service.findById(id);

		if (i.isEmpty()) {
			return ResponseEntity.notFound().build();
		}

		Instrumento instrumentoDB = i.get();
		instrumentoDB.setInstrumento(instrumento.getInstrumento());
		instrumentoDB.setCantidadVendida(instrumento.getCantidadVendida());
		instrumentoDB.setCostoEnvio(instrumento.getCostoEnvio());
		instrumentoDB.setDescripcion(instrumento.getDescripcion());
		instrumentoDB.setModelo(instrumento.getModelo());
		instrumentoDB.setPrecio(instrumento.getPrecio());
		instrumentoDB.setImagen(instrumento.getImagen());

		if (!archivo.isEmpty()) {
			instrumentoDB.setImagen(archivo.getBytes());
		}

		return ResponseEntity.status(HttpStatus.CREATED).body(service.save(instrumentoDB));
	}

	protected ResponseEntity<?> validar(BindingResult result) {
		Map<String, Object> errores = new HashMap<>();
		result.getFieldErrors().forEach(err -> {
			errores.put(err.getField(), " El campo " + err.getField() + " " + err.getDefaultMessage());
		});
		return ResponseEntity.badRequest().body(errores);
	}

}
